// <auto-generated />
using System;
using Gerenciamento.Informacoes.ESocial.Infra.Sql.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gerenciamento.Informacoes.ESocial.Infra.Sql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250905021754_CriandoTabelaLogEnvioEmail")]
    partial class CriandoTabelaLogEnvioEmail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Arquivo", b =>
                {
                    b.Property<int>("ArquivoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArquivoId"));

                    b.Property<byte[]>("Dados")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeArquivo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Tamanho")
                        .HasColumnType("bigint");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TrabalhadorId")
                        .HasColumnType("int");

                    b.HasKey("ArquivoId");

                    b.HasIndex("TrabalhadorId");

                    b.ToTable("Arquivos");
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Cadastro.LogEnvioEmail", b =>
                {
                    b.Property<int>("LogEnvioEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogEnvioEmailId"));

                    b.Property<DateTime?>("DataEventoLog")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTrabalhador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrabalhadorId")
                        .HasColumnType("int");

                    b.HasKey("LogEnvioEmailId");

                    b.ToTable("LogEnvioEmails");
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Cadastro.LogStatusCadastro", b =>
                {
                    b.Property<int>("LogStatusCadastroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogStatusCadastroId"));

                    b.Property<DateTime?>("DataEventoLog")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailTrabalhador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailEnviado")
                        .HasColumnType("bit");

                    b.Property<string>("Pendencias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCadastro")
                        .HasColumnType("int");

                    b.Property<int>("TrabalhadorId")
                        .HasColumnType("int");

                    b.HasKey("LogStatusCadastroId");

                    b.ToTable("LogStatusCadastros");
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Cedido", b =>
                {
                    b.Property<int>("CedidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CedidoId"));

                    b.Property<int>("Categoria")
                        .HasColumnType("int");

                    b.Property<string>("CnpjEmpregadoCedido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataAdmissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("MatriculaTrabalhador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OnusCessReq")
                        .HasColumnType("int");

                    b.Property<int>("TipoRegPrev")
                        .HasColumnType("int");

                    b.Property<int>("TipoRegTrab")
                        .HasColumnType("int");

                    b.Property<int>("TrabalhadorId")
                        .HasColumnType("int");

                    b.HasKey("CedidoId");

                    b.HasIndex("TrabalhadorId")
                        .IsUnique();

                    b.ToTable("Cedidos");
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Dependente", b =>
                {
                    b.Property<int>("DependenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DependenteId"));

                    b.Property<string>("CpfDependente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EhDepIncapaFisMentTrab")
                        .HasColumnType("bit");

                    b.Property<bool>("EhDepTrabalhadorIrrf")
                        .HasColumnType("bit");

                    b.Property<bool>("EhDependentePensao")
                        .HasColumnType("bit");

                    b.Property<string>("NomeDependente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsavel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelefoneResponsavel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoDependente")
                        .HasColumnType("int");

                    b.Property<int>("TrabalhadorId")
                        .HasColumnType("int");

                    b.HasKey("DependenteId");

                    b.HasIndex("TrabalhadorId");

                    b.ToTable("Dependentes");
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Estagiario", b =>
                {
                    b.Property<int>("EstagiarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstagiarioId"));

                    b.Property<int>("AreaAtuacao")
                        .HasColumnType("int");

                    b.Property<string>("CnpjInstEnsino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NaturezaEstagio")
                        .HasColumnType("int");

                    b.Property<string>("NomeSupervisor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazaoSocialInstEnsino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrabalhadorId")
                        .HasColumnType("int");

                    b.HasKey("EstagiarioId");

                    b.HasIndex("TrabalhadorId")
                        .IsUnique();

                    b.ToTable("Estagiarios");
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Trabalhador", b =>
                {
                    b.Property<int>("TrabalhadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrabalhadorId"));

                    b.Property<string>("CodigoNomeTravTrans")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoCivil")
                        .HasColumnType("int");

                    b.Property<int>("GrauInstrucao")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimeiroEmprego")
                        .HasColumnType("bit");

                    b.Property<string>("MunicipioNascimento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nacionalidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeMae")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomePai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaisNascimento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RacaCor")
                        .HasColumnType("int");

                    b.Property<bool>("RecebeBeneficioPrevidencia")
                        .HasColumnType("bit");

                    b.Property<int>("Sexo")
                        .HasColumnType("int");

                    b.Property<int>("StatusCadastro")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("UfNascimento")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrabalhadorId");

                    b.ToTable("Trabalhadores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Arquivo", b =>
                {
                    b.HasOne("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Trabalhador", null)
                        .WithMany()
                        .HasForeignKey("TrabalhadorId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Cedido", b =>
                {
                    b.HasOne("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Trabalhador", "Trabalhador")
                        .WithOne("Cedido")
                        .HasForeignKey("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Cedido", "TrabalhadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trabalhador");
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Dependente", b =>
                {
                    b.HasOne("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Trabalhador", "Trabalhador")
                        .WithMany("Dependentes")
                        .HasForeignKey("TrabalhadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trabalhador");
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Estagiario", b =>
                {
                    b.HasOne("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Trabalhador", "Trabalhador")
                        .WithOne("Estagiario")
                        .HasForeignKey("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Estagiario", "TrabalhadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Gerenciamento.Informacoes.ESocial.Dominio.ObjetosValor.Endereco", "EnderecoInstEnsino", b1 =>
                        {
                            b1.Property<int>("EstagiarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Bairro")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CEP")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Complemento")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Logradouro")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Municipio")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Numero")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("TipoLogradouro")
                                .HasColumnType("int");

                            b1.Property<string>("Uf")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EstagiarioId");

                            b1.ToTable("Estagiarios");

                            b1.WithOwner()
                                .HasForeignKey("EstagiarioId");
                        });

                    b.Navigation("EnderecoInstEnsino");

                    b.Navigation("Trabalhador");
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Trabalhador", b =>
                {
                    b.OwnsOne("Gerenciamento.Informacoes.ESocial.Dominio.ObjetosValor.Endereco", "EnderecoResidencial", b1 =>
                        {
                            b1.Property<int>("TrabalhadorId")
                                .HasColumnType("int");

                            b1.Property<string>("Bairro")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CEP")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Complemento")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Logradouro")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Municipio")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Numero")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("TipoLogradouro")
                                .HasColumnType("int");

                            b1.Property<string>("Uf")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TrabalhadorId");

                            b1.ToTable("Trabalhadores");

                            b1.WithOwner()
                                .HasForeignKey("TrabalhadorId");
                        });

                    b.OwnsOne("Gerenciamento.Informacoes.ESocial.Dominio.ObjetosValor.Contato", "Contato", b1 =>
                        {
                            b1.Property<int>("TrabalhadorId")
                                .HasColumnType("int");

                            b1.Property<string>("Email1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Telefone1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Telefone2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("sDescricao")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TrabalhadorId");

                            b1.ToTable("Trabalhadores");

                            b1.WithOwner()
                                .HasForeignKey("TrabalhadorId");
                        });

                    b.OwnsOne("Gerenciamento.Informacoes.ESocial.Dominio.ObjetosValor.Deficiencia", "DadosDeficiencia", b1 =>
                        {
                            b1.Property<int>("TrabalhadorId")
                                .HasColumnType("int");

                            b1.Property<bool>("TemDeficienciaAuditiva")
                                .HasColumnType("bit");

                            b1.Property<bool>("TemDeficienciaFisica")
                                .HasColumnType("bit");

                            b1.Property<bool>("TemDeficienciaIntelectual")
                                .HasColumnType("bit");

                            b1.Property<bool>("TemDeficienciaMental")
                                .HasColumnType("bit");

                            b1.Property<bool>("TemDeficienciaVisual")
                                .HasColumnType("bit");

                            b1.HasKey("TrabalhadorId");

                            b1.ToTable("Trabalhadores");

                            b1.WithOwner()
                                .HasForeignKey("TrabalhadorId");
                        });

                    b.OwnsOne("Gerenciamento.Informacoes.ESocial.Dominio.ObjetosValor.Documento", "DocumentosPessoais", b1 =>
                        {
                            b1.Property<int>("TrabalhadorId")
                                .HasColumnType("int");

                            b1.Property<int>("CategoriaCnh")
                                .HasColumnType("int");

                            b1.Property<string>("Cpf")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("DataExpedOc")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DataExpedicaoCnh")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DataExpedicaoRg")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DataPrimeiraHabilitacao")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DataValidadeCnh")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DataValidadeOc")
                                .HasColumnType("datetime2");

                            b1.Property<string>("EmissaoOc")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EmissaoRg")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NisPisPasep")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NumeroCnh")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NumeroCtps")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NumeroRegistroOc")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NumeroRg")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NumeroSerieCtps")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UfCnh")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UfCtps")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TrabalhadorId");

                            b1.ToTable("Trabalhadores");

                            b1.WithOwner()
                                .HasForeignKey("TrabalhadorId");
                        });

                    b.Navigation("Contato");

                    b.Navigation("DadosDeficiencia");

                    b.Navigation("DocumentosPessoais");

                    b.Navigation("EnderecoResidencial");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gerenciamento.Informacoes.ESocial.Dominio.Entidades.Trabalhador", b =>
                {
                    b.Navigation("Cedido");

                    b.Navigation("Dependentes");

                    b.Navigation("Estagiario");
                });
#pragma warning restore 612, 618
        }
    }
}
